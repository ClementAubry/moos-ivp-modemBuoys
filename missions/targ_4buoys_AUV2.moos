Community = AUV2
ServerHost = localhost
ServerPort = 9000
MOOSTimeWarp = 1

ProcessConfig = ANTLER
{
  Run = MOOSDB  @ NewConsole = false

  Run = pLogger @ NewConsole = false
  Run = pShare @ NewConsole = false
  Run = pScheduler @ NewConsole = false

  Run = uTimerScript @ NewConsole = false
  Run = uMACView @ NewConsole = false
  //Run = uMS @ NewConsole = false

  //Run = iGPS @ NewConsole = false
  Run = iLabjack @ NewConsole = false
  Run = iModem @ NewConsole = false
}
ProcessConfig = iGPS
{
   AppTick   = 4
   CommsTick = 4

   PORT = /dev/ttyUSB1
   BAUDRATE = 4800
   MAX_RETRIES = 5
   PUBLISHRAW = true

   LatOrigin    = 48.418079
   LongOrigin   = -4.472279
}

ProcessConfig=pShare
{
  //we can do this one at a time using the route directive
  Input = route=multicast_8

  //a verbose way of sharing X, calling it Y and sending
  //on mulitcast_8
  Output = src_name =MODEM_MISSION_STARTEDAUV2,dest_name=MODEM_MISSION_STARTEDAUV2,route=multicast_6
}

ProcessConfig = pScheduler
{
  // generate a response to MODEM_MISSION_START.
  // The variable MODEM_MISSION_STARTED takes on string value $(Community_name)
  RESPONSE = MODEM_MISSION_START : MODEM_MISSION_STARTEDAUV2 @ true
}

ProcessConfig = iModem
{
  AppTick   = 4
  CommsTick = 4
  max_appcast_events = 8

  ROBOT_NAME = AUV2

  SERIAL_PORT_NAME = /dev/ttyUSB0
  BAUD_RATE_CONF = 57600
  BAUD_RATE_COMM = 9600

  MODEM_LJ_POWER = FIO0
  MAGNET_LJ_POWER = FIO1
}

ProcessConfig = iLabjack
{
  AppTick   = 4
  CommsTick = 4

  max_appcast_events = 20
}

ProcessConfig = uTimerScript                                    
{                                                               
  AppTick   = 4                                                 
  CommsTick = 4 

  // If true script is paused upon launch                       
  //paused         = true                                                              
  // Logic condition that must be met for script to be unpaused 
  condition      = MODEM_MISSION_START = true
  // Seconds added to each event time, on each script pass      
  delay_reset    = 0                                            
  // Seconds added to each event time, on first pass only       
  delay_start    = 0
  // Event(s) are the key components of the script              
  event          = var=MODEM_CONFIGURATION_REQUIRED, val="AUV1=master,AUV2=slave,AUV3=slave,AUV4=slave", time=0//15s config
  event          = var=MODEM_SEND_RNG, val="AUV2=1", time=20 //5s for ranging
  event          = var=MODEM_SEND_RANGE, val="AUV2=1", time=40 // 10s for comm
  event          = var=MODEM_ACK_RANGE, val="AUV1=1", time=60 // 10s for comm 
  event          = var=MODEM_SEND_RNG, val="AUV3=1", time=80 //5s for ranging
  event          = var=MODEM_SEND_RANGE, val="AUV3=1", time=100 // 10s for comm
  event          = var=MODEM_ACK_RANGE, val="AUV1=1", time=120 // 10s for comm 
  event          = var=MODEM_SEND_RNG, val="AUV4=1", time=140 //5s for ranging
  event          = var=MODEM_SEND_RANGE, val="AUV4=1", time=160 // 10s for comm
  event          = var=MODEM_ACK_RANGE, val="AUV1=1", time=180 // 10s for comm 


  // A point when the script is reset                           
  reset_time     = 200     // or {all-posted} or range (0,inf)
  // Maximum number of resets allowed                           
  reset_max      = 10000 // or in range [0,inf) 
}
ProcessConfig = pLogger
{
  AppTick   = 4
  CommsTick = 4

  File = MODEM_CONF_TEST

  //SyncLog = false
  //AsyncLog = true

  PATH = ./data

  //LogAuxSrc = true
  WildCardLogging = true
  //WildCardPattern = MODEM_*
  //WildCardOmitPattern = *_ITER_GAP
  //WildCardOmitPattern = *_ITER_LEN
  //WildCardOmitPattern = *_STATUS
  //WildCardOmitPattern = *_DEBUG
}
//------------------------------------------
// uMACView

ProcessConfig = uMACView
{
  AppTick   = 4
  CommsTick = 4
}
